[[plugins]]
repo = 'lewis6991/impatient.nvim'
if = 'has("nvim")'
hook_source = '''
lua require('impatient')
'''

################################################################################
# Completion
################################################################################
# Core
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim']
on_event = 'InsertEnter'
hook_source = '''
inoremap <silent><expr> <C-l> ddc#complete_common_string()
inoremap <silent><expr> <TAB>
            \ pumvisible() ? '<C-n>' :
            \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
            \ '<TAB>' : ddc#manual_complete()

call ddc#custom#patch_global(
            \ 'sources',
            \ has('nvim') ? ['nvimlsp', 'around'] : ['ddc-vim-lsp', 'around'])
call ddc#custom#patch_global('sourceOptions', {
            \ '_': {
                \ 'matchers': ['matcher_head'],
                \ 'sorters': ['sorter_rank'],
            \ },
            \ 'around': {'mark': 'A'},
            \ 'deoppet': {'mark': 'dp', 'dup': v:true},
            \ 'nvimlsp': {'mark': 'lsp', 'forceCompletionPattern': '\.|:|->', 'minAutoCompleteLength': 0},
            \ 'ddc-vim-lsp': {'mark': 'lsp', 'forceCompletionPattern': '\.|:|->', 'minAutoCompleteLength': 0},
            \ })
call ddc#enable()
'''

# Source
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
if = 'has("nvim")'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/ddc-nvim-lsp-doc'
if = 'has("nvim")'
on_source = 'ddc-nvim-lsp'
hook_source = '''
call ddc_nvim_lsp_doc#enable()
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
depends = 'vim-lsp'
if = '!has("nvim")'
on_source = 'ddc.vim'

# Filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# Others
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['impatient.nvim']
if = 'has("nvim")'
on_ft = ['go']
hook_source = '''
lua << EOF
require'lspconfig'.gopls.setup{}
EOF
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
on_source = 'ddc.vim'
if = "has('nvim')"
hook_source = '''
    call deoppet#initialize()
    call deoppet#custom#option('snippets',
                \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
                \     { _, val -> { 'path': val } }))
    imap <C-k> <Plug>(deoppet_expand)
    imap <C-f> <Plug>(deoppet_jump_forward)
    imap <C-b> <Plug>(deoppet_jump_backward)
    smap <C-f> <Plug>(deoppet_jump_forward)
    smap <C-b> <Plug>(deoppet_jump_backward)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

################################################################################

[[plugins]]
repo = 'Shougo/neomru.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = '''
    " 入力モードで開始する
    let g:unite_enable_start_insert=1

    " unite.vim上でのキーマッピング
    autocmd MyAutoCmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()
      " 横分割で開く
      nmap <silent> <buffer> <expr> <C-j> unite#do_action('split')
      imap <silent> <buffer> <expr> <C-j> unite#do_action('split')

      " 縦分割で開く
      nmap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
      imap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')

      " 単語単位からパス単位で削除するように変更
      imap <buffer> <C-w> <Plug>(unite_delete_backward_path)

      " ESCキーを2回押すと終了する
      nmap <silent><buffer> <ESC><ESC> q
      imap <silent><buffer> <ESC><ESC> <ESC>q
    endfunction
'''
hook_add = '''
    " インサート／ノーマルどちらからでも呼び出せるようにキーマップ
    nnoremap <silent> <C-u><C-u>
        \ :<C-u>Unite -buffer-name=files buffer file_mru file file/new<CR>
    inoremap <silent> <C-u><C-u>
        \ <ESC>:<C-u>Unite -buffer-name=files buffer file_mru file file/new<CR>
    nnoremap <silent> <C-u><C-f>
        \ :<C-u>UniteWithBufferDir -buffer-name=files buffer file file_mru file/new<CR>
    inoremap <silent> <C-u><C-f>
        \ <ESC>:<C-u>UniteWithBufferDir -buffer-name=files buffer file file_mru file/new<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = [['n', '<Plug>']]
on_if = "isdirectory(bufname('%'))"
hook_source = '''
    " vimデフォルトのエクスプローラをvimfilerで置き換える
    let g:vimfiler_as_default_explorer = 1
'''
hook_add = '''
    nnoremap <leader>e :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
if = "!has('nvim')"

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'
hook_add = '''
    " unite-outline用の設定
    nnoremap <silent> <C-u><C-o>
        \ :<C-u>Unite outline -no-start-insert -resume<CR>
    inoremap <silent> <C-u><C-o>
        \ <ESC>:<C-u>Unite outline -no-start-insert -resume<CR>
'''
