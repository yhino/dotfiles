# Core
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_source = '''
call ddc#custom#patch_global('ui', 'pum')

if has('nvim')
    call ddc#custom#patch_global('sources', ['nvim-lsp', 'around'])
else
    call ddc#custom#patch_global('sources', ['ddc-vim-lsp', 'around'])
endif
call ddc#custom#patch_global('sourceOptions', {
            \ '_': {
                \ 'matchers': ['matcher_head'],
                \ 'sorters': ['sorter_rank'],
                \ 'ignoreCase': v:true,
            \ },
            \ 'around': {'mark': 'A'},
            \ 'nvim-lsp': {'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*', 'minAutoCompleteLength': 1},
            \ 'ddc-vim-lsp': {'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*', 'minAutoCompleteLength': 1},
            \ })
call ddc#custom#patch_global('completionMenu', 'pum.vim')

" key mappings
inoremap <silent><expr> <TAB>
            \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
            \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
            \ '<TAB>' : ddc#manual_complete()
inoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-l> <Cmd>call pum#map#confirm()<CR>
inoremap <C-e> <Cmd>call pum#map#cancel()<CR>

call ddc#enable()
'''

# UI
[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# Source
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
if = 'has("nvim")'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
depends = 'vim-lsp'
if = '!has("nvim")'
on_source = 'ddc.vim'

# Filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# depends
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
lua << EOF
local nvim_lsp = require('lspconfig')

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

local servers = { 'gopls', 'pyright' }
for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup{
        capabilities=capabilities,
    }
end
EOF
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
