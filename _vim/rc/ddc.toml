# Core
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim']
on_event = 'InsertEnter'
hook_source = '''
inoremap <silent><expr> <C-l> ddc#complete_common_string()
inoremap <silent><expr> <TAB>
            \ pumvisible() ? '<C-n>' :
            \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
            \ '<TAB>' : ddc#manual_complete()

call ddc#custom#patch_global(
            \ 'sources',
            \ has('nvim') ? ['nvimlsp', 'around'] : ['ddc-vim-lsp', 'around'])
call ddc#custom#patch_global('sourceOptions', {
            \ '_': {
                \ 'matchers': ['matcher_head'],
                \ 'sorters': ['sorter_rank'],
            \ },
            \ 'around': {'mark': 'A'},
            \ 'deoppet': {'mark': 'dp', 'dup': v:true},
            \ 'nvimlsp': {'mark': 'lsp', 'forceCompletionPattern': '\.|:|->', 'minAutoCompleteLength': 0},
            \ 'ddc-vim-lsp': {'mark': 'lsp', 'forceCompletionPattern': '\.|:|->', 'minAutoCompleteLength': 0},
            \ })
call ddc#enable()
'''

# Source
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
if = 'has("nvim")'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-nvim-lsp-doc'
if = 'has("nvim")'
on_source = 'ddc-nvim-lsp'
hook_source = '''
call ddc_nvim_lsp_doc#enable()
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
depends = 'vim-lsp'
if = '!has("nvim")'
on_source = 'ddc.vim'

# Filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# depends
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['ddc.vim']
if = 'has("nvim")'
on_if = 'has("nvim")'
hook_source = '''
lua << EOF
require'lspconfig'.gopls.setup{}
require'lspconfig'.pyright.setup{}
EOF
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
on_source = 'ddc.vim'
if = "has('nvim')"
hook_source = '''
    call deoppet#initialize()
    call deoppet#custom#option('snippets',
                \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
                \     { _, val -> { 'path': val } }))
    imap <C-k> <Plug>(deoppet_expand)
    imap <C-f> <Plug>(deoppet_jump_forward)
    imap <C-b> <Plug>(deoppet_jump_backward)
    smap <C-f> <Plug>(deoppet_jump_forward)
    smap <C-b> <Plug>(deoppet_jump_backward)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
