# Core
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim']
on_event = 'InsertEnter'
hook_source = '''
inoremap <silent><expr> <C-l> ddc#complete_common_string()
" <TAB>: completion
inoremap <silent><expr> <TAB>
            \ pumvisible() ? '<C-n>' :
            \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
            \ '<TAB>' : ddc#map#manual_complete()
" <S-TAB>: completion back
inoremap <slient><expr> <S-TAB> pumvisible() ? '<C-p>' : '<C-h>'

if has('nvim')
    call ddc#custom#patch_global('sources', ['nvim-lsp', 'deoppet', 'around'])
else
    call ddc#custom#patch_global('sources', ['ddc-vim-lsp', 'deoppet', 'around'])
endif
call ddc#custom#patch_global('sourceOptions', {
            \ '_': {
                \ 'matchers': ['matcher_head'],
                \ 'sorters': ['sorter_rank'],
                \ 'ignoreCase': v:true,
            \ },
            \ 'around': {'mark': 'A'},
            \ 'deoppet': {'mark': 'dp', 'dup': v:true},
            \ 'nvim-lsp': {'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*', 'minAutoCompleteLength': 1},
            \ 'ddc-vim-lsp': {'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*', 'minAutoCompleteLength': 1},
            \ })
call ddc#enable()
'''

# Source
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
if = 'has("nvim")'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-nvim-lsp-doc'
if = 'has("nvim")'
on_source = 'ddc.vim'
hook_source = '''
let g:ddc_nvim_lsp_doc_config = {
            \ 'documentation': {
                \ 'enable': v:true,
            \ },
            \ 'signature': {
                \ 'enable': v:true,
                \ 'border': 'rounded',
            \ },
            \ }
call ddc_nvim_lsp_doc#enable()
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
depends = 'vim-lsp'
if = '!has("nvim")'
on_source = 'ddc.vim'

# Filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# depends
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
lua << EOF
local nvim_lsp = require('lspconfig')

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

local servers = { 'gopls', 'pyright' }
for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup{
        capabilities=capabilities,
    }
end
EOF
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
on_source = 'ddc.vim'
if = "has('nvim')"
hook_source = '''
    call deoppet#initialize()
    call deoppet#custom#option('snippets',
                \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
                \     { _, val -> { 'path': val } }))
    imap <C-k> <Plug>(deoppet_expand)
    imap <C-f> <Plug>(deoppet_jump_forward)
    imap <C-b> <Plug>(deoppet_jump_backward)
    smap <C-f> <Plug>(deoppet_jump_forward)
    smap <C-b> <Plug>(deoppet_jump_backward)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
